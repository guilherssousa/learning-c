;
; Lispy Standard Library
;

; Define Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; Function Definitions
(def {fun} (lambda {f b} {
  def (head f) (lambda (tail f) b)
}))

; Unpack List for Function
(fun {unpack f l} {
  eval (join (list f) l)
})

; Pack List for Function
(fun {pack f & xs} {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Perform Several things in Sequence
(fun {do & l} {
  if(== l nil)
  {nil}
  {last l}
})

; Open new scope
(fun {let b} {
  ((lambda {_} b) ())
})

; Logical Functions
(fun {not x} {- 1 x})
(fun {or x y} {+ x y})
(fun {and x y} {* x y})

; Miscellaneous Functions

; flip: Takes a function `f` and two arguments `a` and `b`. It then
; applies `f` to `a` and `b` in the reversed order.
(fun {flip f a b} {f b a})

; ghost: Evaluate any number of arguments as expression itself.
; It just does nothing.
(fun {ghost & xs} {eval xs})

; comp: Applies `x` to `g`, and the result of it to `f`.
(fun {comp f g x} {f (g x)})

; List Functions

; First, second or third item in list
(fun {fst l} { eval (head l) })
(fun {snd l} { eval (head (tail l)) })
(fun {trd l} { eval (head (tail (tail l))) })

; Nth item in list
(fun {last l} {nth (- (len l) 1) l})

; Take N items
(fun {take n l} {
  if (== n 0)
  {nil}
  {join (head l) (take (- n 1) (tail l))}
})

; Drop N items
(fun {drop n l} {
  if (== n 0)
  {l}
  {drop (- n 1) (tail l)}
})

; Split at N
(fun {split n l} {list (take n l) (drop n l)})

; Element of List
(fun {elem x l} {
  if(== l nil)
  {false}
  {if (== x (fst l)) {true} {elem x (tail l)}}
})

; Apply Function to List
(fun {map f l} {
  if (== l nil)
  {nil}
  {join (list (f (fst l))) (map f (tail l))}
})

; Apply Filter to List
(fun {filter f l} {
  if (== l nil)
  {nil}
  {join (if (f (fst l)) {head l} {nil}) (filter f (tail l))}
})

; Fold Left
(fun {foldl f z l} {
  if(== l nil)
  {z}
  {foldl f (f z (fst l)) (tail l)}
})

; Useful Math related to `foldl`
(fun {sum l} {foldl + 0 l})
(fun {product l} {foldl * 1 l})

; Default Case for Select
(def {otherwise} true)

; select, allows nice matching :)
(fun {select & cs} {
  if(== cs nil)
  {error "No Selection Found"}
  {if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}
})

; Print Day of Month suffix
(fun {month-day-suffix i} {
  select
  {(== i 0) "st"}
  {(== i 1) "nd"}
  {(== i 3) "rd"}
  {otherwise "th"}
})

; Case-matching (a variation of type that is type specific)
{fun {case x & cs} {
  if(== cs nil)
  {error "No Case Found"}
  {if (== x (fst (fst cs))) 
    {snd (fst cs)}
    {unpack case (join (list x) (tail cs))}
  }
}}

; Fibonacci
(fun {fib n} {
  select
    {(== n 0) 0}
    {(== n 1) 1}
    {otherwise (+ (fib (- n 1)) (fib (- n 2)))}
})
